AUTHORS
-------

- DAHBANI Mohammed
- EZZAKRI Anas

===============

Description of the project
--------------------------

This project implements a working Expr compiler and a Pfx virtual machine in OCaml. The work progresses incrementally, with questions guiding the development of both the compiler and virtual machine.

===============

Sources
-------

Git repository: https://github.com/Dahbani1/Compilation-project

===============

How to…
-------

…retrieve the sources?

  git clone https://redmine-df.telecom-bretagne.eu/git/PROJECTNAME

…compile?

  dune …

…execute and test?

  dune utop and then use the libraries
  (from project root) dune exec expr/main.exe -- expr/basic/tests/an_example.expr
  dune exec ./pfxVM.exe -- TESTFILE.pfx -a 12 -a 52


===============

Structure of the project
------------------------

The project is organized as following:

project
├── README
├── dune-project
├── expr: the expr compiler
│   ├── README
│   ├── basic
│   │   ├── ast.ml
│   │   ├── ast.mli
│   │   ├── dune
│   │   ├── eval.ml
│   │   ├── eval.mli
│   │   ├── lexer.mll
│   │   ├── parser.mly
│   │   ├── tests: for tests
│   │   │   └── an_example.expr
│   │   ├── toPfx.ml             <- To edit
│   │   └── toPfx.mli
│   ├── common
│   │   ├── binOp.ml
│   │   ├── binOp.mli
│   │   └── dune
│   ├── compiler.ml: main file for the expr compiler
│   ├── dune
│   ├── fun: the expr parser for section 7
│   │   ├── ast.ml
│   │   ├── ast.mli
│   │   ├── lexer.mll
│   │   └── parser.mly
│   └── main.ml
├── pfx: the pfx VM
│   ├── basic
│   │   ├── ast.ml               
│   │   ├── ast.mli
│   │   ├── dune
│   │   ├── eval.ml              
│   │   ├── eval.mli
│   │   ├── lexer.mll            
│   │   ├── parser.mly           
│   │   └── tests: for tests
│   │       └── ok_prog.pfx
│   └── pfxVM.ml: main file for the pfx VM
└── utils
    ├── dune
    ├── location.ml: module offering a data type for a location in a file
    └── location.mli
===============

Progress
--------

- All of the exercices up to 8 were done successfully (inclusing compilation and tests)
- Exercices 9 to 12 were done but without being tested: we couldn't figure out how to run tests for the lambda expressions (i.e ((λx.λy.(x − y)) 12) 8 ...)

===============

Know bugs and issues
--------------------

- We were not able to run tests for the lamnda expressions (i.e ((λx.λy.(x − y)) 12) 8 ...) in exercies 9 to 11

===============

Helpful resources
-----------------

- Most of the time, we used stackoverflow to look for solution of some n=bugs we encountered.
- Compilation - Notes provided on Moodle were really helpful.

===============

Difficulties
------------

- Figuring out how to translate coding instructions to a new programming language we are not used to
- Using new tools and new commands to compile the script and make it work
- Code in a new environment and a new paradigm
- Testing the code using utop, but we figure it out in the end.
- Testing in section 10.

